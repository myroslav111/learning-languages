  –ø–æ –¥–µ—Ñ–æ–ª—Ç—É –∏–Ω–≥–ª
  const [currentLanguage] = useState('en');
  const [—Å –∫–∞–∫–æ–≥–æ —è–∑—ã–∫–∞] = useState('');
  const [–Ω–∞ –∫–∞–∫–æ–π] = useState('');
  const [is user registered ?] = useState();
  const [{—Å–ª–æ–≤–æ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ + —è–∑–∏–∫ –µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∞–Ω—ã–π} ] = useState(null);
  const [isSuccess, setIsSuccess] = useState(false);–¥–ª—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—à–∫–∏


  –∑–∞–±–∏—Ä–∞–µ–º –∏–Ω–ø—É—Ç–∏ –∫–ª–∞–¥–µ–º –∏—Ö –≤ –æ–±—å–µ–∫—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–ª–µ–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞—Ä–µ–≥–∞–Ω—ã–π –∏–ª–∏ –Ω–µ—Ç –∏ —è–∑—ã–∫–∞
  (unauth-cards    cards)
  /** write a new word in bd */
  const handleSubmitNewWord = async () => {
    if (!en || !ru) return toast.warn('ü¶Ñ –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –¥–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ.');
    setIsSuccess(true);
    let idCard = nanoid();
    /** if our user unregistered */
    if (!email) {
      apiForUnregisteredUsers.addWord({ en, ru });
    }
    /** if current page is england and user is registered*/
    if (email && currentLanguage === 'en') {
      objUser.data?.push({ en, ru, idCard });
      await apiForRegisteredUsers.addWordAuth(objUser.id, {
        ...objUser,
      });
    }
    /** if current page is deuchland and user is registered*/
    if (email && currentLanguage === 'de') {
      objUser.dataDe?.push({ en, ru, idCard });
      await apiForRegisteredUsers.addWordAuth(objUser.id, {
        ...objUser,
      });
       toast.success('üöÄ –ú–∏ –¥–æ–¥–∞–ª–∏ —Å–ª–æ–≤–æ –¥–æ –≤–∞—à–∏—Ö –∫–∞—Ä—Ç–æ–∫!');
    setEnWord('');
    setRuWord('');
    setIsSuccess(false);
  }
    }